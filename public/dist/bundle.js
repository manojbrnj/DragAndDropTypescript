/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/***/ (function() {

eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nfunction validate(validatableInput) {\n    //check all input  if  false doesnt match falis.\n    let isValid = true;\n    if (validatableInput.required) {\n        isValid = isValid && validatableInput.value.toString().trim().length !== 0;\n    }\n    // console.log(\"required\", isValid);\n    if (validatableInput.minLength != null && typeof validatableInput.value === 'string') {\n        isValid = isValid && validatableInput.value.length >= validatableInput.minLength;\n    }\n    // console.log(\"minLength\", isValid);\n    if (validatableInput.maxLength != null && typeof validatableInput.value === 'string') {\n        isValid = isValid && validatableInput.value.toString().trim.length <= validatableInput.maxLength;\n    }\n    // console.log(\"maxLength\", isValid);\n    if (validatableInput.min != null && typeof validatableInput.value === 'number') {\n        isValid = isValid && validatableInput.value >= validatableInput.min;\n    }\n    // console.log(\"min\", isValid);\n    if (validatableInput.max != null && typeof validatableInput.value === 'number') {\n        isValid = isValid && validatableInput.value <= validatableInput.max;\n    }\n    // console.log(\"max\", isValid);\n    return isValid;\n}\nfunction autoBind(_, _2, descriptor) {\n    const orignaMethodName = descriptor.value;\n    const adjDescriptor = {\n        configurable: true,\n        get() {\n            const bindMethod = orignaMethodName.bind(this);\n            return bindMethod;\n        }\n    };\n    return adjDescriptor;\n}\nclass ProjectState {\n    constructor() {\n        this.projects = [];\n        //title: string, description: string, people: number\n    }\n    static addProject(title, description, people) {\n        const newProject = {\n            id: Math.random().toString(),\n            title: title,\n            description: description,\n            people: people\n        };\n        this.instance.projects.push(newProject);\n    }\n    // we can access access static member in static method .\n    static getInstance() {\n        if (this.instance) {\n            return this.instance;\n        }\n        console.log('hellgs');\n        this.instance = new ProjectState();\n        return this.instance;\n    }\n}\nconst state = ProjectState.getInstance();\nclass ProjectList {\n    constructor(type) {\n        this.type = type;\n        this.templateEl = document.querySelector('#project-list');\n        this.hostEl = document.querySelector('#app');\n        const importContent = document.importNode(this.templateEl.content, true);\n        this.element = importContent.firstElementChild;\n        this.element.id = `${this.type}-project`;\n        this.attach();\n        this.renderContentProjecgtList();\n    }\n    attach() {\n        this.hostEl.insertAdjacentElement('beforeend', this.element);\n    }\n    renderContentProjecgtList() {\n        const List = `${this.type}-project`;\n        this.element.querySelector('ul').id = List;\n        this.element.querySelector('h2').textContent = this.type.toUpperCase() + \" \" + 'PROJECTS';\n    }\n}\n// Project Class Start\nclass Project {\n    constructor() {\n        this.templateEl = document.querySelector('#project-input');\n        this.hostEl = document.querySelector('#app');\n        const importContent = document.importNode(this.templateEl.content, true);\n        this.element = importContent.firstElementChild;\n        this.title = this.element.querySelector('#title');\n        this.description = this.element.querySelector('#description');\n        this.people = this.element.querySelector('#people');\n        this.element.id = 'user-input';\n        this.attach();\n        this.config();\n    }\n    attach() {\n        this.hostEl.insertAdjacentElement('afterbegin', this.element);\n        console.log('hi');\n    }\n    submitHandler(event) {\n        event.preventDefault();\n        const userInput = this.gatherInput();\n        if (Array.isArray(userInput)) {\n            const [title, description, people] = userInput;\n            ProjectState.addProject(...userInput);\n            this.clearInput();\n        }\n    }\n    config() {\n        this.element.addEventListener('submit', this.submitHandler);\n    }\n    clearInput() {\n        this.title.value = '';\n        this.description.value = '';\n        this.people.value = '';\n    }\n    gatherInput() {\n        let enteredtTitle = this.title.value;\n        let enteredDescription = this.description.value;\n        let enteredPeople = this.people.value;\n        if (!validate({ value: enteredtTitle, required: true, minLength: 5 })\n            ||\n                !validate({ value: enteredDescription, required: true, minLength: 5 })\n            ||\n                !validate({ value: +enteredPeople, required: true, minLength: 5 })) {\n            alert(\"invalid input form user\");\n            return;\n        }\n        else {\n            return [enteredtTitle, enteredDescription, +enteredPeople];\n        }\n    }\n}\n__decorate([\n    autoBind\n], Project.prototype, \"submitHandler\", null);\n// Project Class Ends\nconst proj = new Project();\nconst projlist = new ProjectList('active');\nconst projlist1 = new ProjectList('finished');\n\n\n//# sourceURL=webpack://draganddrop/./src/app.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/app.ts"]();
/******/ 	
/******/ })()
;